# ##单向链表1
# class SingleNode: #节点保存内容和下一跳
#     def __init__(self,item,next = None):
#         self.item = item
#         self.next = next
#
#     def __repr__(self):
#         return repr(self.item)
#
# class LinkedList:
#     def __init__(self):
#         self.head = None
#         self.tail = None
#
#     def append(self,item):
#         node = SingleNode(item)
#         if self.head is None:
#             self.head = node  #开头节点
#         else:
#             self.tail.next = node #在第一个结点开始，当前最后一个结点关联下一跳
#         self.tail = node #更新结尾结点
#         return self
#
#     def iternodes(self):
#         current = self.head
#         while current:
#             yield current
#             current = current.next
#
# l1 = LinkedList()
# l1.append('abc')
# l1.append(1).append(2)
# l1.append('def')
#
# print(l1.head,l1.tail)
#
# for item in l1.iternodes():
#     print(item)

#单向链表2 借助列表实现
# class SingleNode:
#     def __init__(self,item,next = None):
#         self.item = item
#         self.next = next
#
#     def __repr__(self):
#         return repr(self.item)
#
# class Linkedlist:
#     def __init__(self):
#         self.head = None
#         self.tail = None
#         self.items = []
#
#     def append(self,item):
#         node = SingleNode(item)
#         if self.head is None:
#             self.head = node  #开头结点，以后不变
#         else:
#             self.tail.next = node#
#         self.tail = node  #更新结尾结点建
#
#         self.items.append(node)
#         return self
#     def iternodes(self):
#         current  = self.head
#         while current:
#             yield current
#             current = current.next
#
#     def getitem(self,index):
#         return self.items[index]
#
# l1 = Linkedlist()
# l1.append('abc')
# l1.append(1).append(2)
# l1.append('def')
#
# print(l1.head,l1.tail)
#
# for item in l1.iternodes():
#     print(item)
#
# for i in range(len(l1.items)):
#     print(l1.getitem(i))



##双向链表
# class SingleNode: # 节点保存内容和下一跳
#     def __init__(self, item, prev=None, next=None):
#         self.item = item
#         self.next = next
#         self.prev = prev # 增加上一跳
#     def __repr__(self):
#         #return repr(self.item)
#         return "({} <== {} ==> {})".format(
#             self.prev.item if self.prev else None,
#             self.item,
#             self.next.item if self.next else None)
# class LinkedList:
#     def __init__(self):
#         self.head = None
#         self.tail = None # 思考tail属性的作用
#         self.size = 0 # 以后实现
#     def append(self, item):
#         node = SingleNode(item)
#         if self.head is None: #
#             self.head = node # 设置开头结点，以后不变
#         else:
#             self.tail.next = node # 当前最后一个结点关联下一跳
#             node.prev = self.tail # 前后关联
#         self.tail = node # 更新结尾结点
#         return self
#     def insert(self, index, item):
#         if index < 0: # 不接受负数
#             raise IndexError('Not negative index {}'.format(index))
#         current = None
#         for i, node in enumerate(self.iternodes()):
#             if i == index: # 找到了
#                 current = node
#                 break
#             else: # 没有break，尾部追加
#                 self.append(item)
#                 return
#                 # break，找到了
#             node = SingleNode(item) # 待加入结点
#             prev = current.prev # 前一个
#             next = current # 后一个
#             if prev is None: # 头部 i == 0
#                 self.head = node
#             else: # 不是首元素
#                 prev.next = node
#                 node.prev = prev
#             node.next = next
#             next.prev = node
#     def pop(self): # 尾部移除
#         if self.tail is None: # 空
#             raise Exception('Empty')
#         node = self.tail
#         item = node.item
#         prev = node.prev
#         if prev is None: # only one node
#             self.head = None
#             self.tail = None
#         else:
#             prev.next = None
#             self.tail = prev
#         return item
#     def remove(self, index):
#         if self.tail is None: # 空
#             raise Exception('Empty')
#         if index < 0: # 不接受负数
#             raise IndexError('Not negative index {}'.format(index))
#         current = None
#         for i, node in enumerate(self.iternodes()):
#             if i == index:
#                 current = node
#                 break
#         else: # Not Found
#             raise IndexError('Wrong index {}.'.format(index))
#         prev = current.prev
#         next = current.next
#         # 4种情况
#         if prev is None and next is None: # only one node
#             self.head = None
#             self.tail = None
#         elif prev is None: # 头部
#             self.head = next
#             next.prev = None
#         elif next is None: # 尾部
#             self.tail = prev
#             prev.next = None
#         else: # 在中间
#             prev.next = next
#             next.prev = prev
#         del current
#     def iternodes(self, reverse=False):
#         current = self.tail if reverse else self.head
#         while current:
#             yield current
#             current = current.prev if reverse else current.next
# l1 = LinkedList()
# l1.append('abc')
# l1.append(1)
# l1.append(2)
# l1.append(3)
# l1.append(4)
# l1.append(5)
# l1.append('abc')
# print(l1.head,l1.tail)
#
# for x in l1.iternodes(True):
#     print(x)
#
# print('=============')
#
# l1.remove(6)
# l1.remove(5)
# l1.remove(0)
# l1.remove(1)
#
# for x in l1.iternodes():
#     print(x)
# print('~~~~~~~~~~~~~~~~~~')
# l1.insert(3,5)
# l1.insert(20,'def')
# l1.insert(0,'abc')
# for x in l1.iternodes():
#     print(x)
