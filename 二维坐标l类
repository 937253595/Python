#设计二维坐标类Point，使其成为可hash类型
# from collections import Hashable
#
# class Point:
#     def __init__(self,x,y):
#         self.x = x
#         self.y = y
#
#     def __hash__(self):
#         return hash((self.x,self.y))
#
#     def __eq__(self, other):
#         return self.x == other.x and self.y == other.y
#
# p1 = Point(4,5)
# p2 = Point(4,5)
# print(hash(p1))
# print(hash(p2))
#
# print(p1 is p2)
# print(p1 == p2)
# print(hex(id(p1)),hex(id(p2)))
# print(set((p1,p2)))
# 
# print(isinstance(p1,Hashable))


#完成Point类设计，实现判断点相等的方法，并完成向量的加法
class Point:
#     def __init__(self,x,y):
#         self.x = x
#         self.y = y
# 
#     def __eq__(self, other):
#         return self.x == other.x and self.y == other.y
# 
#     def __add__(self, other):
#         return Point(self.x + other.x,self.y + other.y)
# 
#     def add(self, other):
#         return (self.x + other.x,self.y + other.y)
# 
#     def __str__(self):
#         return '<Point: {},{}>'.format(self.x,self.y)
# 
# p1 = Point(1,1)
# p2 = Point(1,1)
# points = (p1,p2)
# print(points[0].add(points[1]))
# #运算符重载
# print(points[0] + points[1])
# 
# print(p1 == p2)
